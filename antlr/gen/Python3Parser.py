# Generated from .\Python3.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,99,1167,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,1,0,1,0,1,0,1,0,1,0,3,0,208,8,0,1,
        1,1,1,5,1,212,8,1,10,1,12,1,215,9,1,1,1,1,1,1,2,1,2,5,2,221,8,2,
        10,2,12,2,224,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,232,8,3,1,3,3,3,235,
        8,3,1,3,1,3,1,4,4,4,240,8,4,11,4,12,4,241,1,5,1,5,1,5,1,5,3,5,248,
        8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,258,8,7,1,7,1,7,1,7,1,8,
        1,8,3,8,265,8,8,1,8,1,8,1,9,1,9,1,9,3,9,272,8,9,1,9,1,9,1,9,1,9,
        3,9,278,8,9,5,9,280,8,9,10,9,12,9,283,9,9,1,9,1,9,1,9,3,9,288,8,
        9,1,9,1,9,1,9,1,9,3,9,294,8,9,5,9,296,8,9,10,9,12,9,299,9,9,1,9,
        1,9,1,9,1,9,3,9,305,8,9,3,9,307,8,9,3,9,309,8,9,1,9,1,9,1,9,3,9,
        314,8,9,3,9,316,8,9,3,9,318,8,9,1,9,1,9,3,9,322,8,9,1,9,1,9,1,9,
        1,9,3,9,328,8,9,5,9,330,8,9,10,9,12,9,333,9,9,1,9,1,9,1,9,1,9,3,
        9,339,8,9,3,9,341,8,9,3,9,343,8,9,1,9,1,9,1,9,3,9,348,8,9,3,9,350,
        8,9,1,10,1,10,1,10,3,10,355,8,10,1,11,1,11,1,11,3,11,360,8,11,1,
        11,1,11,1,11,1,11,3,11,366,8,11,5,11,368,8,11,10,11,12,11,371,9,
        11,1,11,1,11,1,11,3,11,376,8,11,1,11,1,11,1,11,1,11,3,11,382,8,11,
        5,11,384,8,11,10,11,12,11,387,9,11,1,11,1,11,1,11,1,11,3,11,393,
        8,11,3,11,395,8,11,3,11,397,8,11,1,11,1,11,1,11,3,11,402,8,11,3,
        11,404,8,11,3,11,406,8,11,1,11,1,11,3,11,410,8,11,1,11,1,11,1,11,
        1,11,3,11,416,8,11,5,11,418,8,11,10,11,12,11,421,9,11,1,11,1,11,
        1,11,1,11,3,11,427,8,11,3,11,429,8,11,3,11,431,8,11,1,11,1,11,1,
        11,3,11,436,8,11,3,11,438,8,11,1,12,1,12,1,13,1,13,3,13,444,8,13,
        1,14,1,14,1,14,5,14,449,8,14,10,14,12,14,452,9,14,1,14,3,14,455,
        8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,467,
        8,15,1,16,1,16,1,16,1,16,1,16,3,16,474,8,16,1,16,1,16,1,16,3,16,
        479,8,16,5,16,481,8,16,10,16,12,16,484,9,16,3,16,486,8,16,1,17,1,
        17,1,17,1,17,1,17,3,17,493,8,17,1,18,1,18,1,19,1,19,3,19,499,8,19,
        1,19,1,19,1,19,3,19,504,8,19,5,19,506,8,19,10,19,12,19,509,9,19,
        1,19,3,19,512,8,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,3,23,526,8,23,1,24,1,24,1,25,1,25,1,26,1,26,3,26,
        534,8,26,1,27,1,27,1,28,1,28,1,28,1,28,3,28,542,8,28,3,28,544,8,
        28,1,29,1,29,3,29,548,8,29,1,30,1,30,1,30,1,31,1,31,5,31,555,8,31,
        10,31,12,31,558,9,31,1,31,1,31,4,31,562,8,31,11,31,12,31,563,3,31,
        566,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,575,8,31,1,32,1,
        32,1,32,3,32,580,8,32,1,33,1,33,1,33,3,33,585,8,33,1,34,1,34,1,34,
        5,34,590,8,34,10,34,12,34,593,9,34,1,34,3,34,596,8,34,1,35,1,35,
        1,35,5,35,601,8,35,10,35,12,35,604,9,35,1,36,1,36,1,36,5,36,609,
        8,36,10,36,12,36,612,9,36,1,37,1,37,1,37,1,37,5,37,618,8,37,10,37,
        12,37,621,9,37,1,38,1,38,1,38,1,38,5,38,627,8,38,10,38,12,38,630,
        9,38,1,39,1,39,1,39,1,39,3,39,636,8,39,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,3,40,647,8,40,1,41,1,41,1,41,1,41,3,41,653,8,
        41,1,42,1,42,1,42,1,42,1,42,5,42,660,8,42,10,42,12,42,663,9,42,1,
        42,3,42,666,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
        45,1,45,1,45,1,45,1,45,3,45,682,8,45,1,46,1,46,1,46,1,46,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,3,47,695,8,47,1,48,1,48,1,48,1,48,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,4,49,708,8,49,11,49,12,49,709,1,
        49,1,49,1,49,3,49,715,8,49,1,49,1,49,1,49,3,49,720,8,49,1,49,1,49,
        1,49,3,49,725,8,49,1,50,1,50,1,50,1,50,5,50,731,8,50,10,50,12,50,
        734,9,50,1,50,1,50,1,50,1,51,1,51,1,51,3,51,742,8,51,1,52,1,52,1,
        52,1,52,3,52,748,8,52,3,52,750,8,52,1,53,1,53,1,53,1,53,4,53,756,
        8,53,11,53,12,53,757,1,53,1,53,3,53,762,8,53,1,54,1,54,1,54,1,54,
        1,54,1,54,3,54,770,8,54,1,54,3,54,773,8,54,1,55,1,55,3,55,777,8,
        55,1,56,1,56,3,56,781,8,56,1,56,1,56,1,56,1,57,1,57,3,57,788,8,57,
        1,57,1,57,1,57,1,58,1,58,5,58,795,8,58,10,58,12,58,798,9,58,1,59,
        1,59,1,59,1,60,1,60,5,60,805,8,60,10,60,12,60,808,9,60,1,61,1,61,
        1,61,1,62,1,62,3,62,815,8,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
        5,64,824,8,64,10,64,12,64,827,9,64,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,842,8,65,1,66,1,66,1,66,
        1,67,1,67,5,67,849,8,67,10,67,12,67,852,9,67,1,68,1,68,1,68,1,69,
        1,69,5,69,859,8,69,10,69,12,69,862,9,69,1,70,1,70,1,70,1,71,1,71,
        5,71,869,8,71,10,71,12,71,872,9,71,1,72,1,72,1,72,1,73,1,73,5,73,
        879,8,73,10,73,12,73,882,9,73,1,74,1,74,1,74,1,75,1,75,1,75,1,75,
        5,75,891,8,75,10,75,12,75,894,9,75,1,76,1,76,1,76,1,76,5,76,900,
        8,76,10,76,12,76,903,9,76,1,77,1,77,1,77,1,77,3,77,909,8,77,1,78,
        1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,3,81,920,8,81,1,82,3,82,
        923,8,82,1,82,1,82,5,82,927,8,82,10,82,12,82,930,9,82,1,83,1,83,
        1,83,3,83,935,8,83,1,83,1,83,1,83,3,83,940,8,83,1,83,1,83,1,83,3,
        83,945,8,83,1,83,1,83,1,83,1,83,4,83,951,8,83,11,83,12,83,952,1,
        83,1,83,1,83,1,83,3,83,959,8,83,1,84,1,84,3,84,963,8,84,1,84,1,84,
        1,84,1,84,3,84,969,8,84,5,84,971,8,84,10,84,12,84,974,9,84,1,84,
        3,84,977,8,84,3,84,979,8,84,1,85,1,85,3,85,983,8,85,1,85,1,85,1,
        85,1,85,1,85,1,85,1,85,3,85,992,8,85,1,86,1,86,1,86,5,86,997,8,86,
        10,86,12,86,1000,9,86,1,86,3,86,1003,8,86,1,87,1,87,3,87,1007,8,
        87,1,87,1,87,3,87,1011,8,87,1,87,3,87,1014,8,87,3,87,1016,8,87,1,
        88,1,88,3,88,1020,8,88,1,89,1,89,3,89,1024,8,89,1,89,1,89,1,89,3,
        89,1029,8,89,5,89,1031,8,89,10,89,12,89,1034,9,89,1,89,3,89,1037,
        8,89,1,90,1,90,1,90,5,90,1042,8,90,10,90,12,90,1045,9,90,1,90,3,
        90,1048,8,90,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1056,8,91,1,91,1,
        91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1066,8,91,5,91,1068,8,91,10,
        91,12,91,1071,9,91,1,91,3,91,1074,8,91,3,91,1076,8,91,1,91,1,91,
        3,91,1080,8,91,1,91,1,91,1,91,1,91,3,91,1086,8,91,5,91,1088,8,91,
        10,91,12,91,1091,9,91,1,91,3,91,1094,8,91,3,91,1096,8,91,3,91,1098,
        8,91,1,92,1,92,1,92,1,92,3,92,1104,8,92,1,92,3,92,1107,8,92,1,92,
        1,92,1,92,1,93,1,93,1,93,5,93,1115,8,93,10,93,12,93,1118,9,93,1,
        93,3,93,1121,8,93,1,94,1,94,3,94,1125,8,94,1,94,1,94,1,94,1,94,1,
        94,1,94,1,94,1,94,3,94,1135,8,94,1,95,1,95,3,95,1139,8,95,1,96,3,
        96,1142,8,96,1,96,1,96,1,96,1,96,1,96,3,96,1149,8,96,1,97,1,97,1,
        97,3,97,1154,8,97,1,98,1,98,1,99,1,99,3,99,1160,8,99,1,100,1,100,
        1,100,3,100,1165,8,100,1,100,0,0,101,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,0,6,
        1,0,83,95,1,0,49,50,1,0,64,65,3,0,51,51,68,70,81,81,1,0,66,67,2,
        0,66,67,71,71,1277,0,207,1,0,0,0,2,213,1,0,0,0,4,218,1,0,0,0,6,227,
        1,0,0,0,8,239,1,0,0,0,10,243,1,0,0,0,12,249,1,0,0,0,14,252,1,0,0,
        0,16,262,1,0,0,0,18,349,1,0,0,0,20,351,1,0,0,0,22,437,1,0,0,0,24,
        439,1,0,0,0,26,443,1,0,0,0,28,445,1,0,0,0,30,466,1,0,0,0,32,468,
        1,0,0,0,34,487,1,0,0,0,36,494,1,0,0,0,38,498,1,0,0,0,40,513,1,0,
        0,0,42,515,1,0,0,0,44,518,1,0,0,0,46,525,1,0,0,0,48,527,1,0,0,0,
        50,529,1,0,0,0,52,531,1,0,0,0,54,535,1,0,0,0,56,537,1,0,0,0,58,547,
        1,0,0,0,60,549,1,0,0,0,62,552,1,0,0,0,64,576,1,0,0,0,66,581,1,0,
        0,0,68,586,1,0,0,0,70,597,1,0,0,0,72,605,1,0,0,0,74,613,1,0,0,0,
        76,622,1,0,0,0,78,631,1,0,0,0,80,646,1,0,0,0,82,648,1,0,0,0,84,654,
        1,0,0,0,86,667,1,0,0,0,88,672,1,0,0,0,90,676,1,0,0,0,92,683,1,0,
        0,0,94,687,1,0,0,0,96,696,1,0,0,0,98,700,1,0,0,0,100,726,1,0,0,0,
        102,738,1,0,0,0,104,743,1,0,0,0,106,761,1,0,0,0,108,772,1,0,0,0,
        110,776,1,0,0,0,112,778,1,0,0,0,114,785,1,0,0,0,116,792,1,0,0,0,
        118,799,1,0,0,0,120,802,1,0,0,0,122,809,1,0,0,0,124,814,1,0,0,0,
        126,816,1,0,0,0,128,819,1,0,0,0,130,841,1,0,0,0,132,843,1,0,0,0,
        134,846,1,0,0,0,136,853,1,0,0,0,138,856,1,0,0,0,140,863,1,0,0,0,
        142,866,1,0,0,0,144,873,1,0,0,0,146,876,1,0,0,0,148,883,1,0,0,0,
        150,886,1,0,0,0,152,895,1,0,0,0,154,908,1,0,0,0,156,910,1,0,0,0,
        158,912,1,0,0,0,160,914,1,0,0,0,162,916,1,0,0,0,164,922,1,0,0,0,
        166,958,1,0,0,0,168,962,1,0,0,0,170,991,1,0,0,0,172,993,1,0,0,0,
        174,1015,1,0,0,0,176,1017,1,0,0,0,178,1023,1,0,0,0,180,1038,1,0,
        0,0,182,1097,1,0,0,0,184,1099,1,0,0,0,186,1111,1,0,0,0,188,1134,
        1,0,0,0,190,1138,1,0,0,0,192,1141,1,0,0,0,194,1150,1,0,0,0,196,1155,
        1,0,0,0,198,1157,1,0,0,0,200,1164,1,0,0,0,202,208,5,39,0,0,203,208,
        3,28,14,0,204,205,3,80,40,0,205,206,5,39,0,0,206,208,1,0,0,0,207,
        202,1,0,0,0,207,203,1,0,0,0,207,204,1,0,0,0,208,1,1,0,0,0,209,212,
        5,39,0,0,210,212,3,26,13,0,211,209,1,0,0,0,211,210,1,0,0,0,212,215,
        1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,
        1,0,0,0,216,217,5,0,0,1,217,3,1,0,0,0,218,222,3,180,90,0,219,221,
        5,39,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,
        1,0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,5,0,0,1,226,5,1,
        0,0,0,227,228,5,81,0,0,228,234,3,72,36,0,229,231,5,52,0,0,230,232,
        3,186,93,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,235,
        5,53,0,0,234,229,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,
        5,39,0,0,237,7,1,0,0,0,238,240,3,6,3,0,239,238,1,0,0,0,240,241,1,
        0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,9,1,0,0,0,243,247,3,8,
        4,0,244,248,3,184,92,0,245,248,3,14,7,0,246,248,3,12,6,0,247,244,
        1,0,0,0,247,245,1,0,0,0,247,246,1,0,0,0,248,11,1,0,0,0,249,250,5,
        37,0,0,250,251,3,14,7,0,251,13,1,0,0,0,252,253,5,4,0,0,253,254,5,
        40,0,0,254,257,3,16,8,0,255,256,5,82,0,0,256,258,3,108,54,0,257,
        255,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,260,5,55,0,0,260,
        261,3,106,53,0,261,15,1,0,0,0,262,264,5,52,0,0,263,265,3,18,9,0,
        264,263,1,0,0,0,264,265,1,0,0,0,265,266,1,0,0,0,266,267,5,53,0,0,
        267,17,1,0,0,0,268,271,3,20,10,0,269,270,5,58,0,0,270,272,3,108,
        54,0,271,269,1,0,0,0,271,272,1,0,0,0,272,281,1,0,0,0,273,274,5,54,
        0,0,274,277,3,20,10,0,275,276,5,58,0,0,276,278,3,108,54,0,277,275,
        1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,273,1,0,0,0,280,283,
        1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,317,1,0,0,0,283,281,
        1,0,0,0,284,315,5,54,0,0,285,287,5,51,0,0,286,288,3,20,10,0,287,
        286,1,0,0,0,287,288,1,0,0,0,288,297,1,0,0,0,289,290,5,54,0,0,290,
        293,3,20,10,0,291,292,5,58,0,0,292,294,3,108,54,0,293,291,1,0,0,
        0,293,294,1,0,0,0,294,296,1,0,0,0,295,289,1,0,0,0,296,299,1,0,0,
        0,297,295,1,0,0,0,297,298,1,0,0,0,298,308,1,0,0,0,299,297,1,0,0,
        0,300,306,5,54,0,0,301,302,5,57,0,0,302,304,3,20,10,0,303,305,5,
        54,0,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,301,1,
        0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,300,1,0,0,0,308,309,1,
        0,0,0,309,316,1,0,0,0,310,311,5,57,0,0,311,313,3,20,10,0,312,314,
        5,54,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,285,
        1,0,0,0,315,310,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,284,
        1,0,0,0,317,318,1,0,0,0,318,350,1,0,0,0,319,321,5,51,0,0,320,322,
        3,20,10,0,321,320,1,0,0,0,321,322,1,0,0,0,322,331,1,0,0,0,323,324,
        5,54,0,0,324,327,3,20,10,0,325,326,5,58,0,0,326,328,3,108,54,0,327,
        325,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,323,1,0,0,0,330,
        333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,342,1,0,0,0,333,
        331,1,0,0,0,334,340,5,54,0,0,335,336,5,57,0,0,336,338,3,20,10,0,
        337,339,5,54,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,
        340,335,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,334,1,0,0,0,
        342,343,1,0,0,0,343,350,1,0,0,0,344,345,5,57,0,0,345,347,3,20,10,
        0,346,348,5,54,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,
        0,349,268,1,0,0,0,349,319,1,0,0,0,349,344,1,0,0,0,350,19,1,0,0,0,
        351,354,5,40,0,0,352,353,5,55,0,0,353,355,3,108,54,0,354,352,1,0,
        0,0,354,355,1,0,0,0,355,21,1,0,0,0,356,359,3,24,12,0,357,358,5,58,
        0,0,358,360,3,108,54,0,359,357,1,0,0,0,359,360,1,0,0,0,360,369,1,
        0,0,0,361,362,5,54,0,0,362,365,3,24,12,0,363,364,5,58,0,0,364,366,
        3,108,54,0,365,363,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,361,
        1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,405,
        1,0,0,0,371,369,1,0,0,0,372,403,5,54,0,0,373,375,5,51,0,0,374,376,
        3,24,12,0,375,374,1,0,0,0,375,376,1,0,0,0,376,385,1,0,0,0,377,378,
        5,54,0,0,378,381,3,24,12,0,379,380,5,58,0,0,380,382,3,108,54,0,381,
        379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,377,1,0,0,0,384,
        387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,396,1,0,0,0,387,
        385,1,0,0,0,388,394,5,54,0,0,389,390,5,57,0,0,390,392,3,24,12,0,
        391,393,5,54,0,0,392,391,1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,
        394,389,1,0,0,0,394,395,1,0,0,0,395,397,1,0,0,0,396,388,1,0,0,0,
        396,397,1,0,0,0,397,404,1,0,0,0,398,399,5,57,0,0,399,401,3,24,12,
        0,400,402,5,54,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,
        0,403,373,1,0,0,0,403,398,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,
        0,405,372,1,0,0,0,405,406,1,0,0,0,406,438,1,0,0,0,407,409,5,51,0,
        0,408,410,3,24,12,0,409,408,1,0,0,0,409,410,1,0,0,0,410,419,1,0,
        0,0,411,412,5,54,0,0,412,415,3,24,12,0,413,414,5,58,0,0,414,416,
        3,108,54,0,415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,411,
        1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,430,
        1,0,0,0,421,419,1,0,0,0,422,428,5,54,0,0,423,424,5,57,0,0,424,426,
        3,24,12,0,425,427,5,54,0,0,426,425,1,0,0,0,426,427,1,0,0,0,427,429,
        1,0,0,0,428,423,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,422,
        1,0,0,0,430,431,1,0,0,0,431,438,1,0,0,0,432,433,5,57,0,0,433,435,
        3,24,12,0,434,436,5,54,0,0,435,434,1,0,0,0,435,436,1,0,0,0,436,438,
        1,0,0,0,437,356,1,0,0,0,437,407,1,0,0,0,437,432,1,0,0,0,438,23,1,
        0,0,0,439,440,5,40,0,0,440,25,1,0,0,0,441,444,3,28,14,0,442,444,
        3,80,40,0,443,441,1,0,0,0,443,442,1,0,0,0,444,27,1,0,0,0,445,450,
        3,30,15,0,446,447,5,56,0,0,447,449,3,30,15,0,448,446,1,0,0,0,449,
        452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,454,1,0,0,0,452,
        450,1,0,0,0,453,455,5,56,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,
        456,1,0,0,0,456,457,5,39,0,0,457,29,1,0,0,0,458,467,3,32,16,0,459,
        467,3,42,21,0,460,467,3,44,22,0,461,467,3,46,23,0,462,467,3,58,29,
        0,463,467,3,74,37,0,464,467,3,76,38,0,465,467,3,78,39,0,466,458,
        1,0,0,0,466,459,1,0,0,0,466,460,1,0,0,0,466,461,1,0,0,0,466,462,
        1,0,0,0,466,463,1,0,0,0,466,464,1,0,0,0,466,465,1,0,0,0,467,31,1,
        0,0,0,468,485,3,38,19,0,469,486,3,34,17,0,470,473,3,40,20,0,471,
        474,3,198,99,0,472,474,3,180,90,0,473,471,1,0,0,0,473,472,1,0,0,
        0,474,486,1,0,0,0,475,478,3,36,18,0,476,479,3,198,99,0,477,479,3,
        38,19,0,478,476,1,0,0,0,478,477,1,0,0,0,479,481,1,0,0,0,480,475,
        1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,486,
        1,0,0,0,484,482,1,0,0,0,485,469,1,0,0,0,485,470,1,0,0,0,485,482,
        1,0,0,0,486,33,1,0,0,0,487,488,5,55,0,0,488,492,3,108,54,0,489,490,
        3,36,18,0,490,491,3,108,54,0,491,493,1,0,0,0,492,489,1,0,0,0,492,
        493,1,0,0,0,493,35,1,0,0,0,494,495,5,58,0,0,495,37,1,0,0,0,496,499,
        3,108,54,0,497,499,3,132,66,0,498,496,1,0,0,0,498,497,1,0,0,0,499,
        507,1,0,0,0,500,503,5,54,0,0,501,504,3,108,54,0,502,504,3,132,66,
        0,503,501,1,0,0,0,503,502,1,0,0,0,504,506,1,0,0,0,505,500,1,0,0,
        0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,511,1,0,0,
        0,509,507,1,0,0,0,510,512,5,54,0,0,511,510,1,0,0,0,511,512,1,0,0,
        0,512,39,1,0,0,0,513,514,7,0,0,0,514,41,1,0,0,0,515,516,5,33,0,0,
        516,517,3,178,89,0,517,43,1,0,0,0,518,519,5,34,0,0,519,45,1,0,0,
        0,520,526,3,48,24,0,521,526,3,50,25,0,522,526,3,52,26,0,523,526,
        3,56,28,0,524,526,3,54,27,0,525,520,1,0,0,0,525,521,1,0,0,0,525,
        522,1,0,0,0,525,523,1,0,0,0,525,524,1,0,0,0,526,47,1,0,0,0,527,528,
        5,36,0,0,528,49,1,0,0,0,529,530,5,35,0,0,530,51,1,0,0,0,531,533,
        5,5,0,0,532,534,3,180,90,0,533,532,1,0,0,0,533,534,1,0,0,0,534,53,
        1,0,0,0,535,536,3,198,99,0,536,55,1,0,0,0,537,543,5,6,0,0,538,541,
        3,108,54,0,539,540,5,7,0,0,540,542,3,108,54,0,541,539,1,0,0,0,541,
        542,1,0,0,0,542,544,1,0,0,0,543,538,1,0,0,0,543,544,1,0,0,0,544,
        57,1,0,0,0,545,548,3,60,30,0,546,548,3,62,31,0,547,545,1,0,0,0,547,
        546,1,0,0,0,548,59,1,0,0,0,549,550,5,8,0,0,550,551,3,70,35,0,551,
        61,1,0,0,0,552,565,5,7,0,0,553,555,7,1,0,0,554,553,1,0,0,0,555,558,
        1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,559,1,0,0,0,558,556,
        1,0,0,0,559,566,3,72,36,0,560,562,7,1,0,0,561,560,1,0,0,0,562,563,
        1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,566,1,0,0,0,565,556,
        1,0,0,0,565,561,1,0,0,0,566,567,1,0,0,0,567,574,5,8,0,0,568,575,
        5,51,0,0,569,570,5,52,0,0,570,571,3,68,34,0,571,572,5,53,0,0,572,
        575,1,0,0,0,573,575,3,68,34,0,574,568,1,0,0,0,574,569,1,0,0,0,574,
        573,1,0,0,0,575,63,1,0,0,0,576,579,5,40,0,0,577,578,5,9,0,0,578,
        580,5,40,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,65,1,0,0,0,581,
        584,3,72,36,0,582,583,5,9,0,0,583,585,5,40,0,0,584,582,1,0,0,0,584,
        585,1,0,0,0,585,67,1,0,0,0,586,591,3,64,32,0,587,588,5,54,0,0,588,
        590,3,64,32,0,589,587,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,
        592,1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,594,596,5,54,0,0,595,
        594,1,0,0,0,595,596,1,0,0,0,596,69,1,0,0,0,597,602,3,66,33,0,598,
        599,5,54,0,0,599,601,3,66,33,0,600,598,1,0,0,0,601,604,1,0,0,0,602,
        600,1,0,0,0,602,603,1,0,0,0,603,71,1,0,0,0,604,602,1,0,0,0,605,610,
        5,40,0,0,606,607,5,49,0,0,607,609,5,40,0,0,608,606,1,0,0,0,609,612,
        1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,73,1,0,0,0,612,610,1,
        0,0,0,613,614,5,10,0,0,614,619,5,40,0,0,615,616,5,54,0,0,616,618,
        5,40,0,0,617,615,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,
        1,0,0,0,620,75,1,0,0,0,621,619,1,0,0,0,622,623,5,11,0,0,623,628,
        5,40,0,0,624,625,5,54,0,0,625,627,5,40,0,0,626,624,1,0,0,0,627,630,
        1,0,0,0,628,626,1,0,0,0,628,629,1,0,0,0,629,77,1,0,0,0,630,628,1,
        0,0,0,631,632,5,12,0,0,632,635,3,108,54,0,633,634,5,54,0,0,634,636,
        3,108,54,0,635,633,1,0,0,0,635,636,1,0,0,0,636,79,1,0,0,0,637,647,
        3,84,42,0,638,647,3,90,45,0,639,647,3,94,47,0,640,647,3,98,49,0,
        641,647,3,100,50,0,642,647,3,14,7,0,643,647,3,184,92,0,644,647,3,
        10,5,0,645,647,3,82,41,0,646,637,1,0,0,0,646,638,1,0,0,0,646,639,
        1,0,0,0,646,640,1,0,0,0,646,641,1,0,0,0,646,642,1,0,0,0,646,643,
        1,0,0,0,646,644,1,0,0,0,646,645,1,0,0,0,647,81,1,0,0,0,648,652,5,
        37,0,0,649,653,3,14,7,0,650,653,3,100,50,0,651,653,3,94,47,0,652,
        649,1,0,0,0,652,650,1,0,0,0,652,651,1,0,0,0,653,83,1,0,0,0,654,655,
        5,13,0,0,655,656,3,108,54,0,656,657,5,55,0,0,657,661,3,106,53,0,
        658,660,3,86,43,0,659,658,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,
        0,661,662,1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,664,666,3,88,44,
        0,665,664,1,0,0,0,665,666,1,0,0,0,666,85,1,0,0,0,667,668,5,14,0,
        0,668,669,3,108,54,0,669,670,5,55,0,0,670,671,3,106,53,0,671,87,
        1,0,0,0,672,673,5,15,0,0,673,674,5,55,0,0,674,675,3,106,53,0,675,
        89,1,0,0,0,676,677,5,16,0,0,677,678,3,108,54,0,678,679,5,55,0,0,
        679,681,3,106,53,0,680,682,3,92,46,0,681,680,1,0,0,0,681,682,1,0,
        0,0,682,91,1,0,0,0,683,684,5,15,0,0,684,685,5,55,0,0,685,686,3,106,
        53,0,686,93,1,0,0,0,687,688,5,17,0,0,688,689,3,178,89,0,689,690,
        5,18,0,0,690,691,3,180,90,0,691,692,5,55,0,0,692,694,3,106,53,0,
        693,695,3,96,48,0,694,693,1,0,0,0,694,695,1,0,0,0,695,95,1,0,0,0,
        696,697,5,15,0,0,697,698,5,55,0,0,698,699,3,106,53,0,699,97,1,0,
        0,0,700,701,5,19,0,0,701,702,5,55,0,0,702,724,3,106,53,0,703,704,
        3,104,52,0,704,705,5,55,0,0,705,706,3,106,53,0,706,708,1,0,0,0,707,
        703,1,0,0,0,708,709,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,
        714,1,0,0,0,711,712,5,15,0,0,712,713,5,55,0,0,713,715,3,106,53,0,
        714,711,1,0,0,0,714,715,1,0,0,0,715,719,1,0,0,0,716,717,5,20,0,0,
        717,718,5,55,0,0,718,720,3,106,53,0,719,716,1,0,0,0,719,720,1,0,
        0,0,720,725,1,0,0,0,721,722,5,20,0,0,722,723,5,55,0,0,723,725,3,
        106,53,0,724,707,1,0,0,0,724,721,1,0,0,0,725,99,1,0,0,0,726,727,
        5,21,0,0,727,732,3,102,51,0,728,729,5,54,0,0,729,731,3,102,51,0,
        730,728,1,0,0,0,731,734,1,0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,
        733,735,1,0,0,0,734,732,1,0,0,0,735,736,5,55,0,0,736,737,3,106,53,
        0,737,101,1,0,0,0,738,741,3,108,54,0,739,740,5,9,0,0,740,742,3,134,
        67,0,741,739,1,0,0,0,741,742,1,0,0,0,742,103,1,0,0,0,743,749,5,22,
        0,0,744,747,3,108,54,0,745,746,5,9,0,0,746,748,5,40,0,0,747,745,
        1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,744,1,0,0,0,749,750,
        1,0,0,0,750,105,1,0,0,0,751,762,3,28,14,0,752,753,5,39,0,0,753,755,
        5,98,0,0,754,756,3,26,13,0,755,754,1,0,0,0,756,757,1,0,0,0,757,755,
        1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,5,99,0,0,760,762,
        1,0,0,0,761,751,1,0,0,0,761,752,1,0,0,0,762,107,1,0,0,0,763,769,
        3,116,58,0,764,765,5,13,0,0,765,766,3,116,58,0,766,767,5,15,0,0,
        767,768,3,108,54,0,768,770,1,0,0,0,769,764,1,0,0,0,769,770,1,0,0,
        0,770,773,1,0,0,0,771,773,3,112,56,0,772,763,1,0,0,0,772,771,1,0,
        0,0,773,109,1,0,0,0,774,777,3,116,58,0,775,777,3,114,57,0,776,774,
        1,0,0,0,776,775,1,0,0,0,777,111,1,0,0,0,778,780,5,23,0,0,779,781,
        3,22,11,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,783,
        5,55,0,0,783,784,3,108,54,0,784,113,1,0,0,0,785,787,5,23,0,0,786,
        788,3,22,11,0,787,786,1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,789,
        790,5,55,0,0,790,791,3,110,55,0,791,115,1,0,0,0,792,796,3,120,60,
        0,793,795,3,118,59,0,794,793,1,0,0,0,795,798,1,0,0,0,796,794,1,0,
        0,0,796,797,1,0,0,0,797,117,1,0,0,0,798,796,1,0,0,0,799,800,5,24,
        0,0,800,801,3,120,60,0,801,119,1,0,0,0,802,806,3,124,62,0,803,805,
        3,122,61,0,804,803,1,0,0,0,805,808,1,0,0,0,806,804,1,0,0,0,806,807,
        1,0,0,0,807,121,1,0,0,0,808,806,1,0,0,0,809,810,5,25,0,0,810,811,
        3,124,62,0,811,123,1,0,0,0,812,815,3,126,63,0,813,815,3,128,64,0,
        814,812,1,0,0,0,814,813,1,0,0,0,815,125,1,0,0,0,816,817,5,26,0,0,
        817,818,3,124,62,0,818,127,1,0,0,0,819,825,3,134,67,0,820,821,3,
        130,65,0,821,822,3,134,67,0,822,824,1,0,0,0,823,820,1,0,0,0,824,
        827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,0,0,826,129,1,0,0,0,827,
        825,1,0,0,0,828,842,5,74,0,0,829,842,5,75,0,0,830,842,5,76,0,0,831,
        842,5,77,0,0,832,842,5,78,0,0,833,842,5,79,0,0,834,842,5,80,0,0,
        835,842,5,18,0,0,836,837,5,26,0,0,837,842,5,18,0,0,838,842,5,27,
        0,0,839,840,5,27,0,0,840,842,5,26,0,0,841,828,1,0,0,0,841,829,1,
        0,0,0,841,830,1,0,0,0,841,831,1,0,0,0,841,832,1,0,0,0,841,833,1,
        0,0,0,841,834,1,0,0,0,841,835,1,0,0,0,841,836,1,0,0,0,841,838,1,
        0,0,0,841,839,1,0,0,0,842,131,1,0,0,0,843,844,5,51,0,0,844,845,3,
        134,67,0,845,133,1,0,0,0,846,850,3,138,69,0,847,849,3,136,68,0,848,
        847,1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,
        135,1,0,0,0,852,850,1,0,0,0,853,854,5,61,0,0,854,855,3,138,69,0,
        855,137,1,0,0,0,856,860,3,142,71,0,857,859,3,140,70,0,858,857,1,
        0,0,0,859,862,1,0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,139,1,
        0,0,0,862,860,1,0,0,0,863,864,5,62,0,0,864,865,3,142,71,0,865,141,
        1,0,0,0,866,870,3,146,73,0,867,869,3,144,72,0,868,867,1,0,0,0,869,
        872,1,0,0,0,870,868,1,0,0,0,870,871,1,0,0,0,871,143,1,0,0,0,872,
        870,1,0,0,0,873,874,5,63,0,0,874,875,3,146,73,0,875,145,1,0,0,0,
        876,880,3,150,75,0,877,879,3,148,74,0,878,877,1,0,0,0,879,882,1,
        0,0,0,880,878,1,0,0,0,880,881,1,0,0,0,881,147,1,0,0,0,882,880,1,
        0,0,0,883,884,7,2,0,0,884,885,3,150,75,0,885,149,1,0,0,0,886,892,
        3,152,76,0,887,888,3,158,79,0,888,889,3,152,76,0,889,891,1,0,0,0,
        890,887,1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,0,0,0,
        893,151,1,0,0,0,894,892,1,0,0,0,895,901,3,154,77,0,896,897,3,156,
        78,0,897,898,3,154,77,0,898,900,1,0,0,0,899,896,1,0,0,0,900,903,
        1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,153,1,0,0,0,903,901,
        1,0,0,0,904,905,3,160,80,0,905,906,3,154,77,0,906,909,1,0,0,0,907,
        909,3,162,81,0,908,904,1,0,0,0,908,907,1,0,0,0,909,155,1,0,0,0,910,
        911,7,3,0,0,911,157,1,0,0,0,912,913,7,4,0,0,913,159,1,0,0,0,914,
        915,7,5,0,0,915,161,1,0,0,0,916,919,3,164,82,0,917,918,5,57,0,0,
        918,920,3,154,77,0,919,917,1,0,0,0,919,920,1,0,0,0,920,163,1,0,0,
        0,921,923,5,38,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,924,1,0,0,
        0,924,928,3,166,83,0,925,927,3,170,85,0,926,925,1,0,0,0,927,930,
        1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,0,929,165,1,0,0,0,930,928,
        1,0,0,0,931,934,5,52,0,0,932,935,3,198,99,0,933,935,3,168,84,0,934,
        932,1,0,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,
        959,5,53,0,0,937,939,5,59,0,0,938,940,3,168,84,0,939,938,1,0,0,0,
        939,940,1,0,0,0,940,941,1,0,0,0,941,959,5,60,0,0,942,944,5,72,0,
        0,943,945,3,182,91,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,
        0,0,946,959,5,73,0,0,947,959,5,40,0,0,948,959,5,2,0,0,949,951,5,
        1,0,0,950,949,1,0,0,0,951,952,1,0,0,0,952,950,1,0,0,0,952,953,1,
        0,0,0,953,959,1,0,0,0,954,959,5,50,0,0,955,959,5,28,0,0,956,959,
        5,29,0,0,957,959,5,30,0,0,958,931,1,0,0,0,958,937,1,0,0,0,958,942,
        1,0,0,0,958,947,1,0,0,0,958,948,1,0,0,0,958,950,1,0,0,0,958,954,
        1,0,0,0,958,955,1,0,0,0,958,956,1,0,0,0,958,957,1,0,0,0,959,167,
        1,0,0,0,960,963,3,108,54,0,961,963,3,132,66,0,962,960,1,0,0,0,962,
        961,1,0,0,0,963,978,1,0,0,0,964,979,3,192,96,0,965,968,5,54,0,0,
        966,969,3,108,54,0,967,969,3,132,66,0,968,966,1,0,0,0,968,967,1,
        0,0,0,969,971,1,0,0,0,970,965,1,0,0,0,971,974,1,0,0,0,972,970,1,
        0,0,0,972,973,1,0,0,0,973,976,1,0,0,0,974,972,1,0,0,0,975,977,5,
        54,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,979,1,0,0,0,978,964,1,
        0,0,0,978,972,1,0,0,0,979,169,1,0,0,0,980,982,5,52,0,0,981,983,3,
        186,93,0,982,981,1,0,0,0,982,983,1,0,0,0,983,984,1,0,0,0,984,992,
        5,53,0,0,985,986,5,59,0,0,986,987,3,172,86,0,987,988,5,60,0,0,988,
        992,1,0,0,0,989,990,5,49,0,0,990,992,5,40,0,0,991,980,1,0,0,0,991,
        985,1,0,0,0,991,989,1,0,0,0,992,171,1,0,0,0,993,998,3,174,87,0,994,
        995,5,54,0,0,995,997,3,174,87,0,996,994,1,0,0,0,997,1000,1,0,0,0,
        998,996,1,0,0,0,998,999,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,
        0,1001,1003,5,54,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,173,
        1,0,0,0,1004,1016,3,108,54,0,1005,1007,3,108,54,0,1006,1005,1,0,
        0,0,1006,1007,1,0,0,0,1007,1008,1,0,0,0,1008,1010,5,55,0,0,1009,
        1011,3,108,54,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1013,1,
        0,0,0,1012,1014,3,176,88,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,
        1016,1,0,0,0,1015,1004,1,0,0,0,1015,1006,1,0,0,0,1016,175,1,0,0,
        0,1017,1019,5,55,0,0,1018,1020,3,108,54,0,1019,1018,1,0,0,0,1019,
        1020,1,0,0,0,1020,177,1,0,0,0,1021,1024,3,134,67,0,1022,1024,3,132,
        66,0,1023,1021,1,0,0,0,1023,1022,1,0,0,0,1024,1032,1,0,0,0,1025,
        1028,5,54,0,0,1026,1029,3,134,67,0,1027,1029,3,132,66,0,1028,1026,
        1,0,0,0,1028,1027,1,0,0,0,1029,1031,1,0,0,0,1030,1025,1,0,0,0,1031,
        1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,1036,1,0,0,
        0,1034,1032,1,0,0,0,1035,1037,5,54,0,0,1036,1035,1,0,0,0,1036,1037,
        1,0,0,0,1037,179,1,0,0,0,1038,1043,3,108,54,0,1039,1040,5,54,0,0,
        1040,1042,3,108,54,0,1041,1039,1,0,0,0,1042,1045,1,0,0,0,1043,1041,
        1,0,0,0,1043,1044,1,0,0,0,1044,1047,1,0,0,0,1045,1043,1,0,0,0,1046,
        1048,5,54,0,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,181,1,0,0,
        0,1049,1050,3,108,54,0,1050,1051,5,55,0,0,1051,1052,3,108,54,0,1052,
        1056,1,0,0,0,1053,1054,5,57,0,0,1054,1056,3,134,67,0,1055,1049,1,
        0,0,0,1055,1053,1,0,0,0,1056,1075,1,0,0,0,1057,1076,3,192,96,0,1058,
        1065,5,54,0,0,1059,1060,3,108,54,0,1060,1061,5,55,0,0,1061,1062,
        3,108,54,0,1062,1066,1,0,0,0,1063,1064,5,57,0,0,1064,1066,3,134,
        67,0,1065,1059,1,0,0,0,1065,1063,1,0,0,0,1066,1068,1,0,0,0,1067,
        1058,1,0,0,0,1068,1071,1,0,0,0,1069,1067,1,0,0,0,1069,1070,1,0,0,
        0,1070,1073,1,0,0,0,1071,1069,1,0,0,0,1072,1074,5,54,0,0,1073,1072,
        1,0,0,0,1073,1074,1,0,0,0,1074,1076,1,0,0,0,1075,1057,1,0,0,0,1075,
        1069,1,0,0,0,1076,1098,1,0,0,0,1077,1080,3,108,54,0,1078,1080,3,
        132,66,0,1079,1077,1,0,0,0,1079,1078,1,0,0,0,1080,1095,1,0,0,0,1081,
        1096,3,192,96,0,1082,1085,5,54,0,0,1083,1086,3,108,54,0,1084,1086,
        3,132,66,0,1085,1083,1,0,0,0,1085,1084,1,0,0,0,1086,1088,1,0,0,0,
        1087,1082,1,0,0,0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,
        1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1092,1094,5,54,0,0,1093,
        1092,1,0,0,0,1093,1094,1,0,0,0,1094,1096,1,0,0,0,1095,1081,1,0,0,
        0,1095,1089,1,0,0,0,1096,1098,1,0,0,0,1097,1055,1,0,0,0,1097,1079,
        1,0,0,0,1098,183,1,0,0,0,1099,1100,5,31,0,0,1100,1106,5,40,0,0,1101,
        1103,5,52,0,0,1102,1104,3,186,93,0,1103,1102,1,0,0,0,1103,1104,1,
        0,0,0,1104,1105,1,0,0,0,1105,1107,5,53,0,0,1106,1101,1,0,0,0,1106,
        1107,1,0,0,0,1107,1108,1,0,0,0,1108,1109,5,55,0,0,1109,1110,3,106,
        53,0,1110,185,1,0,0,0,1111,1116,3,188,94,0,1112,1113,5,54,0,0,1113,
        1115,3,188,94,0,1114,1112,1,0,0,0,1115,1118,1,0,0,0,1116,1114,1,
        0,0,0,1116,1117,1,0,0,0,1117,1120,1,0,0,0,1118,1116,1,0,0,0,1119,
        1121,5,54,0,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,187,1,0,0,
        0,1122,1124,3,108,54,0,1123,1125,3,192,96,0,1124,1123,1,0,0,0,1124,
        1125,1,0,0,0,1125,1135,1,0,0,0,1126,1127,3,108,54,0,1127,1128,5,
        58,0,0,1128,1129,3,108,54,0,1129,1135,1,0,0,0,1130,1131,5,57,0,0,
        1131,1135,3,108,54,0,1132,1133,5,51,0,0,1133,1135,3,108,54,0,1134,
        1122,1,0,0,0,1134,1126,1,0,0,0,1134,1130,1,0,0,0,1134,1132,1,0,0,
        0,1135,189,1,0,0,0,1136,1139,3,192,96,0,1137,1139,3,194,97,0,1138,
        1136,1,0,0,0,1138,1137,1,0,0,0,1139,191,1,0,0,0,1140,1142,5,37,0,
        0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,1143,1144,
        5,17,0,0,1144,1145,3,178,89,0,1145,1146,5,18,0,0,1146,1148,3,116,
        58,0,1147,1149,3,190,95,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,
        193,1,0,0,0,1150,1151,5,13,0,0,1151,1153,3,110,55,0,1152,1154,3,
        190,95,0,1153,1152,1,0,0,0,1153,1154,1,0,0,0,1154,195,1,0,0,0,1155,
        1156,5,40,0,0,1156,197,1,0,0,0,1157,1159,5,32,0,0,1158,1160,3,200,
        100,0,1159,1158,1,0,0,0,1159,1160,1,0,0,0,1160,199,1,0,0,0,1161,
        1162,5,7,0,0,1162,1165,3,108,54,0,1163,1165,3,180,90,0,1164,1161,
        1,0,0,0,1164,1163,1,0,0,0,1165,201,1,0,0,0,166,207,211,213,222,231,
        234,241,247,257,264,271,277,281,287,293,297,304,306,308,313,315,
        317,321,327,331,338,340,342,347,349,354,359,365,369,375,381,385,
        392,394,396,401,403,405,409,415,419,426,428,430,435,437,443,450,
        454,466,473,478,482,485,492,498,503,507,511,525,533,541,543,547,
        556,563,565,574,579,584,591,595,602,610,619,628,635,646,652,661,
        665,681,694,709,714,719,724,732,741,747,749,757,761,769,772,776,
        780,787,796,806,814,825,841,850,860,870,880,892,901,908,919,922,
        928,934,939,944,952,958,962,968,972,976,978,982,991,998,1002,1006,
        1010,1013,1015,1019,1023,1028,1032,1036,1043,1047,1055,1065,1069,
        1073,1075,1079,1085,1089,1093,1095,1097,1103,1106,1116,1120,1124,
        1134,1138,1141,1148,1153,1159,1164
    ]

class Python3Parser ( Parser ):

    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'as'", "'global'", "'nonlocal'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'finally'", "'with'", "'except'", "'lambda'", "'or'", 
                     "'and'", "'not'", "'is'", "'None'", "'True'", "'False'", 
                     "'class'", "'yield'", "'del'", "'pass'", "'continue'", 
                     "'break'", "'async'", "'await'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", 
                     "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", 
                     "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
                     "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "STRING", "NUMBER", "INTEGER", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", 
                      "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", 
                      "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", 
                      "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", 
                      "ASYNC", "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT", 
                      "DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_async_funcdef = 6
    RULE_funcdef = 7
    RULE_parameters = 8
    RULE_typedargslist = 9
    RULE_tfpdef = 10
    RULE_varargslist = 11
    RULE_vfpdef = 12
    RULE_stmt = 13
    RULE_simple_stmt = 14
    RULE_small_stmt = 15
    RULE_expr_stmt = 16
    RULE_annassign = 17
    RULE_assignrule = 18
    RULE_testlist_star_expr = 19
    RULE_augassign = 20
    RULE_del_stmt = 21
    RULE_pass_stmt = 22
    RULE_flow_stmt = 23
    RULE_break_stmt = 24
    RULE_continue_stmt = 25
    RULE_return_stmt = 26
    RULE_yield_stmt = 27
    RULE_raise_stmt = 28
    RULE_import_stmt = 29
    RULE_import_name = 30
    RULE_import_from = 31
    RULE_import_as_name = 32
    RULE_dotted_as_name = 33
    RULE_import_as_names = 34
    RULE_dotted_as_names = 35
    RULE_dotted_name = 36
    RULE_global_stmt = 37
    RULE_nonlocal_stmt = 38
    RULE_assert_stmt = 39
    RULE_compound_stmt = 40
    RULE_async_stmt = 41
    RULE_if_stmt = 42
    RULE_elif_ifstmt = 43
    RULE_else_ifstmt = 44
    RULE_while_stmt = 45
    RULE_else_while = 46
    RULE_for_stmt = 47
    RULE_else_for = 48
    RULE_try_stmt = 49
    RULE_with_stmt = 50
    RULE_with_item = 51
    RULE_except_clause = 52
    RULE_suite = 53
    RULE_test = 54
    RULE_test_nocond = 55
    RULE_lambdef = 56
    RULE_lambdef_nocond = 57
    RULE_or_test = 58
    RULE_orrule = 59
    RULE_and_test = 60
    RULE_andrule = 61
    RULE_not_test = 62
    RULE_notrule = 63
    RULE_comparison = 64
    RULE_comp_op = 65
    RULE_star_expr = 66
    RULE_expr = 67
    RULE_orexprrule = 68
    RULE_xor_expr = 69
    RULE_xorexprrule = 70
    RULE_and_expr = 71
    RULE_andexprrule = 72
    RULE_shift_expr = 73
    RULE_shiftexprrule = 74
    RULE_arith_expr = 75
    RULE_term = 76
    RULE_factor = 77
    RULE_arithmeticrule = 78
    RULE_arithmeticrule1 = 79
    RULE_arithmeticrule2 = 80
    RULE_power = 81
    RULE_atom_expr = 82
    RULE_atom = 83
    RULE_testlist_comp = 84
    RULE_trailer = 85
    RULE_subscriptlist = 86
    RULE_subscript = 87
    RULE_sliceop = 88
    RULE_exprlist = 89
    RULE_testlist = 90
    RULE_dictorsetmaker = 91
    RULE_classdef = 92
    RULE_arglist = 93
    RULE_argument = 94
    RULE_comp_iter = 95
    RULE_comp_for = 96
    RULE_comp_if = 97
    RULE_encoding_decl = 98
    RULE_yield_expr = 99
    RULE_yield_arg = 100

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmt", "small_stmt", "expr_stmt", 
                   "annassign", "assignrule", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "elif_ifstmt", "else_ifstmt", 
                   "while_stmt", "else_while", "for_stmt", "else_for", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "suite", "test", 
                   "test_nocond", "lambdef", "lambdef_nocond", "or_test", 
                   "orrule", "and_test", "andrule", "not_test", "notrule", 
                   "comparison", "comp_op", "star_expr", "expr", "orexprrule", 
                   "xor_expr", "xorexprrule", "and_expr", "andexprrule", 
                   "shift_expr", "shiftexprrule", "arith_expr", "term", 
                   "factor", "arithmeticrule", "arithmeticrule1", "arithmeticrule2", 
                   "power", "atom_expr", "atom", "testlist_comp", "trailer", 
                   "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
                   "yield_expr", "yield_arg" ]

    EOF = Token.EOF
    STRING=1
    NUMBER=2
    INTEGER=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    AS=9
    GLOBAL=10
    NONLOCAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    FINALLY=20
    WITH=21
    EXCEPT=22
    LAMBDA=23
    OR=24
    AND=25
    NOT=26
    IS=27
    NONE=28
    TRUE=29
    FALSE=30
    CLASS=31
    YIELD=32
    DEL=33
    PASS=34
    CONTINUE=35
    BREAK=36
    ASYNC=37
    AWAIT=38
    NEWLINE=39
    NAME=40
    STRING_LITERAL=41
    BYTES_LITERAL=42
    DECIMAL_INTEGER=43
    OCT_INTEGER=44
    HEX_INTEGER=45
    BIN_INTEGER=46
    FLOAT_NUMBER=47
    IMAG_NUMBER=48
    DOT=49
    ELLIPSIS=50
    STAR=51
    OPEN_PAREN=52
    CLOSE_PAREN=53
    COMMA=54
    COLON=55
    SEMI_COLON=56
    POWER=57
    ASSIGN=58
    OPEN_BRACK=59
    CLOSE_BRACK=60
    OR_OP=61
    XOR=62
    AND_OP=63
    LEFT_SHIFT=64
    RIGHT_SHIFT=65
    ADD=66
    MINUS=67
    DIV=68
    MOD=69
    IDIV=70
    NOT_OP=71
    OPEN_BRACE=72
    CLOSE_BRACE=73
    LESS_THAN=74
    GREATER_THAN=75
    EQUALS=76
    GT_EQ=77
    LT_EQ=78
    NOT_EQ_1=79
    NOT_EQ_2=80
    AT=81
    ARROW=82
    ADD_ASSIGN=83
    SUB_ASSIGN=84
    MULT_ASSIGN=85
    AT_ASSIGN=86
    DIV_ASSIGN=87
    MOD_ASSIGN=88
    AND_ASSIGN=89
    OR_ASSIGN=90
    XOR_ASSIGN=91
    LEFT_SHIFT_ASSIGN=92
    RIGHT_SHIFT_ASSIGN=93
    POWER_ASSIGN=94
    IDIV_ASSIGN=95
    SKIP_=96
    UNKNOWN_CHAR=97
    INDENT=98
    DEDENT=99

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.match(Python3Parser.NEWLINE)
                pass
            elif token in [1, 2, 5, 6, 7, 8, 10, 11, 12, 23, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 40, 50, 51, 52, 59, 66, 67, 71, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 203
                self.simple_stmt()
                pass
            elif token in [4, 13, 16, 17, 19, 21, 31, 37, 81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 204
                self.compound_stmt()
                self.state = 205
                self.match(Python3Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 584344250484473334) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32867) != 0):
                self.state = 211
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 209
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 21, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 50, 51, 52, 59, 66, 67, 71, 72, 81]:
                    self.state = 210
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 216
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.testlist()
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 219
                self.match(Python3Parser.NEWLINE)
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(Python3Parser.AT)
            self.state = 228
            self.dotted_name()
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 229
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 728458616071258118) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                    self.state = 230
                    self.arglist()


                self.state = 233
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 236
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 238
                self.decorator()
                self.state = 241 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==81):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def async_funcdef(self):
            return self.getTypedRuleContext(Python3Parser.Async_funcdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.decorators()
            self.state = 247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.state = 244
                self.classdef()
                pass
            elif token in [4]:
                self.state = 245
                self.funcdef()
                pass
            elif token in [37]:
                self.state = 246
                self.async_funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_funcdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_funcdef" ):
                listener.enterAsync_funcdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_funcdef" ):
                listener.exitAsync_funcdef(self)




    def async_funcdef(self):

        localctx = Python3Parser.Async_funcdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_async_funcdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(Python3Parser.ASYNC)
            self.state = 250
            self.funcdef()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def ARROW(self):
            return self.getToken(Python3Parser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(Python3Parser.DEF)
            self.state = 253
            self.match(Python3Parser.NAME)
            self.state = 254
            self.parameters()
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 255
                self.match(Python3Parser.ARROW)
                self.state = 256
                self.test()


            self.state = 259
            self.match(Python3Parser.COLON)
            self.state = 260
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 146368087401168896) != 0):
                self.state = 263
                self.typedargslist()


            self.state = 266
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)




    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.state = 268
                self.tfpdef()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 269
                    self.match(Python3Parser.ASSIGN)
                    self.state = 270
                    self.test()


                self.state = 281
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 273
                        self.match(Python3Parser.COMMA)
                        self.state = 274
                        self.tfpdef()
                        self.state = 277
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==58:
                            self.state = 275
                            self.match(Python3Parser.ASSIGN)
                            self.state = 276
                            self.test()

                 
                    self.state = 283
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 284
                    self.match(Python3Parser.COMMA)
                    self.state = 315
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [51]:
                        self.state = 285
                        self.match(Python3Parser.STAR)
                        self.state = 287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==40:
                            self.state = 286
                            self.tfpdef()


                        self.state = 297
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 289
                                self.match(Python3Parser.COMMA)
                                self.state = 290
                                self.tfpdef()
                                self.state = 293
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==58:
                                    self.state = 291
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 292
                                    self.test()

                         
                            self.state = 299
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==54:
                            self.state = 300
                            self.match(Python3Parser.COMMA)
                            self.state = 306
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==57:
                                self.state = 301
                                self.match(Python3Parser.POWER)
                                self.state = 302
                                self.tfpdef()
                                self.state = 304
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==54:
                                    self.state = 303
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [57]:
                        self.state = 310
                        self.match(Python3Parser.POWER)
                        self.state = 311
                        self.tfpdef()
                        self.state = 313
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==54:
                            self.state = 312
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [53]:
                        pass
                    else:
                        pass


                pass
            elif token in [51]:
                self.state = 319
                self.match(Python3Parser.STAR)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 320
                    self.tfpdef()


                self.state = 331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 323
                        self.match(Python3Parser.COMMA)
                        self.state = 324
                        self.tfpdef()
                        self.state = 327
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==58:
                            self.state = 325
                            self.match(Python3Parser.ASSIGN)
                            self.state = 326
                            self.test()

                 
                    self.state = 333
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 334
                    self.match(Python3Parser.COMMA)
                    self.state = 340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 335
                        self.match(Python3Parser.POWER)
                        self.state = 336
                        self.tfpdef()
                        self.state = 338
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==54:
                            self.state = 337
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [57]:
                self.state = 344
                self.match(Python3Parser.POWER)
                self.state = 345
                self.tfpdef()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 346
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(Python3Parser.NAME)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 352
                self.match(Python3Parser.COLON)
                self.state = 353
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ASSIGN)
            else:
                return self.getToken(Python3Parser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.state = 356
                self.vfpdef()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 357
                    self.match(Python3Parser.ASSIGN)
                    self.state = 358
                    self.test()


                self.state = 369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 361
                        self.match(Python3Parser.COMMA)
                        self.state = 362
                        self.vfpdef()
                        self.state = 365
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==58:
                            self.state = 363
                            self.match(Python3Parser.ASSIGN)
                            self.state = 364
                            self.test()

                 
                    self.state = 371
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 372
                    self.match(Python3Parser.COMMA)
                    self.state = 403
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [51]:
                        self.state = 373
                        self.match(Python3Parser.STAR)
                        self.state = 375
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==40:
                            self.state = 374
                            self.vfpdef()


                        self.state = 385
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 377
                                self.match(Python3Parser.COMMA)
                                self.state = 378
                                self.vfpdef()
                                self.state = 381
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==58:
                                    self.state = 379
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 380
                                    self.test()

                         
                            self.state = 387
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                        self.state = 396
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==54:
                            self.state = 388
                            self.match(Python3Parser.COMMA)
                            self.state = 394
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==57:
                                self.state = 389
                                self.match(Python3Parser.POWER)
                                self.state = 390
                                self.vfpdef()
                                self.state = 392
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==54:
                                    self.state = 391
                                    self.match(Python3Parser.COMMA)






                        pass
                    elif token in [57]:
                        self.state = 398
                        self.match(Python3Parser.POWER)
                        self.state = 399
                        self.vfpdef()
                        self.state = 401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==54:
                            self.state = 400
                            self.match(Python3Parser.COMMA)


                        pass
                    elif token in [55]:
                        pass
                    else:
                        pass


                pass
            elif token in [51]:
                self.state = 407
                self.match(Python3Parser.STAR)
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 408
                    self.vfpdef()


                self.state = 419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 411
                        self.match(Python3Parser.COMMA)
                        self.state = 412
                        self.vfpdef()
                        self.state = 415
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==58:
                            self.state = 413
                            self.match(Python3Parser.ASSIGN)
                            self.state = 414
                            self.test()

                 
                    self.state = 421
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 422
                    self.match(Python3Parser.COMMA)
                    self.state = 428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 423
                        self.match(Python3Parser.POWER)
                        self.state = 424
                        self.vfpdef()
                        self.state = 426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==54:
                            self.state = 425
                            self.match(Python3Parser.COMMA)






                pass
            elif token in [57]:
                self.state = 432
                self.match(Python3Parser.POWER)
                self.state = 433
                self.vfpdef()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 434
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_stmt)
        try:
            self.state = 443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 5, 6, 7, 8, 10, 11, 12, 23, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 40, 50, 51, 52, 59, 66, 67, 71, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.simple_stmt()
                pass
            elif token in [4, 13, 16, 17, 19, 21, 31, 37, 81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.SEMI_COLON)
            else:
                return self.getToken(Python3Parser.SEMI_COLON, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.small_stmt()
            self.state = 450
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 446
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 447
                    self.small_stmt() 
                self.state = 452
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 453
                self.match(Python3Parser.SEMI_COLON)


            self.state = 456
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmall_stmt" ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmall_stmt" ):
                listener.exitSmall_stmt(self)




    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_small_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 51, 52, 59, 66, 67, 71, 72]:
                self.state = 458
                self.expr_stmt()
                pass
            elif token in [33]:
                self.state = 459
                self.del_stmt()
                pass
            elif token in [34]:
                self.state = 460
                self.pass_stmt()
                pass
            elif token in [5, 6, 32, 35, 36]:
                self.state = 461
                self.flow_stmt()
                pass
            elif token in [7, 8]:
                self.state = 462
                self.import_stmt()
                pass
            elif token in [10]:
                self.state = 463
                self.global_stmt()
                pass
            elif token in [11]:
                self.state = 464
                self.nonlocal_stmt()
                pass
            elif token in [12]:
                self.state = 465
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def annassign(self):
            return self.getTypedRuleContext(Python3Parser.AnnassignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def assignrule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AssignruleContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AssignruleContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.testlist_star_expr()
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55]:
                self.state = 469
                self.annassign()
                pass
            elif token in [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95]:
                self.state = 470
                self.augassign()
                self.state = 473
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 471
                    self.yield_expr()
                    pass
                elif token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                    self.state = 472
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [39, 56, 58]:
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==58:
                    self.state = 475
                    self.assignrule()
                    self.state = 478
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [32]:
                        self.state = 476
                        self.yield_expr()
                        pass
                    elif token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 51, 52, 59, 66, 67, 71, 72]:
                        self.state = 477
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def assignrule(self):
            return self.getTypedRuleContext(Python3Parser.AssignruleContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_annassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnassign" ):
                listener.enterAnnassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnassign" ):
                listener.exitAnnassign(self)




    def annassign(self):

        localctx = Python3Parser.AnnassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_annassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(Python3Parser.COLON)
            self.state = 488
            self.test()
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 489
                self.assignrule()
                self.state = 490
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assignrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignrule" ):
                listener.enterAssignrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignrule" ):
                listener.exitAssignrule(self)




    def assignrule(self):

        localctx = Python3Parser.AssignruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assignrule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(Python3Parser.ASSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                self.state = 496
                self.test()
                pass
            elif token in [51]:
                self.state = 497
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 507
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 500
                    self.match(Python3Parser.COMMA)
                    self.state = 503
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                        self.state = 501
                        self.test()
                        pass
                    elif token in [51]:
                        self.state = 502
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 509
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 510
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(Python3Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Python3Parser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(Python3Parser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(Python3Parser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Python3Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Python3Parser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Python3Parser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Python3Parser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Python3Parser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(Python3Parser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(Python3Parser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8191) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(Python3Parser.DEL)
            self.state = 516
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_flow_stmt)
        try:
            self.state = 525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.break_stmt()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.continue_stmt()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.return_stmt()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 4)
                self.state = 523
                self.raise_stmt()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 5)
                self.state = 524
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(Python3Parser.RETURN)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 582091628181716998) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                self.state = 532
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(Python3Parser.RAISE)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 582091628181716998) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                self.state = 538
                self.test()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 539
                    self.match(Python3Parser.FROM)
                    self.state = 540
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_stmt)
        try:
            self.state = 547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 545
                self.import_name()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 546
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(Python3Parser.IMPORT)
            self.state = 550
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELLIPSIS)
            else:
                return self.getToken(Python3Parser.ELLIPSIS, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(Python3Parser.FROM)
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==49 or _la==50:
                    self.state = 553
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==50):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 559
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 561 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 560
                    _la = self._input.LA(1)
                    if not(_la==49 or _la==50):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 563 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==49 or _la==50):
                        break

                pass


            self.state = 567
            self.match(Python3Parser.IMPORT)
            self.state = 574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.state = 568
                self.match(Python3Parser.STAR)
                pass
            elif token in [52]:
                self.state = 569
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 570
                self.import_as_names()
                self.state = 571
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [40]:
                self.state = 573
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(Python3Parser.NAME)
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 577
                self.match(Python3Parser.AS)
                self.state = 578
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.dotted_name()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 582
                self.match(Python3Parser.AS)
                self.state = 583
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.import_as_name()
            self.state = 591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 587
                    self.match(Python3Parser.COMMA)
                    self.state = 588
                    self.import_as_name() 
                self.state = 593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 594
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.dotted_as_name()
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 598
                self.match(Python3Parser.COMMA)
                self.state = 599
                self.dotted_as_name()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.DOT)
            else:
                return self.getToken(Python3Parser.DOT, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(Python3Parser.NAME)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 606
                self.match(Python3Parser.DOT)
                self.state = 607
                self.match(Python3Parser.NAME)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(Python3Parser.GLOBAL)
            self.state = 614
            self.match(Python3Parser.NAME)
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 615
                self.match(Python3Parser.COMMA)
                self.state = 616
                self.match(Python3Parser.NAME)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(Python3Parser.NONLOCAL)
            self.state = 623
            self.match(Python3Parser.NAME)
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 624
                self.match(Python3Parser.COMMA)
                self.state = 625
                self.match(Python3Parser.NAME)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self):
            return self.getToken(Python3Parser.COMMA, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(Python3Parser.ASSERT)
            self.state = 632
            self.test()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 633
                self.match(Python3Parser.COMMA)
                self.state = 634
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def async_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Async_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_compound_stmt)
        try:
            self.state = 646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.if_stmt()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.while_stmt()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 639
                self.for_stmt()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 4)
                self.state = 640
                self.try_stmt()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 5)
                self.state = 641
                self.with_stmt()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 6)
                self.state = 642
                self.funcdef()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 7)
                self.state = 643
                self.classdef()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 8)
                self.state = 644
                self.decorated()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 9)
                self.state = 645
                self.async_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Async_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_async_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsync_stmt" ):
                listener.enterAsync_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsync_stmt" ):
                listener.exitAsync_stmt(self)




    def async_stmt(self):

        localctx = Python3Parser.Async_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_async_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(Python3Parser.ASYNC)
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.state = 649
                self.funcdef()
                pass
            elif token in [21]:
                self.state = 650
                self.with_stmt()
                pass
            elif token in [17]:
                self.state = 651
                self.for_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def elif_ifstmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Elif_ifstmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Elif_ifstmtContext,i)


        def else_ifstmt(self):
            return self.getTypedRuleContext(Python3Parser.Else_ifstmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(Python3Parser.IF)
            self.state = 655
            self.test()
            self.state = 656
            self.match(Python3Parser.COLON)
            self.state = 657
            self.suite()
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14:
                self.state = 658
                self.elif_ifstmt()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 664
                self.else_ifstmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_ifstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(Python3Parser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_elif_ifstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_ifstmt" ):
                listener.enterElif_ifstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_ifstmt" ):
                listener.exitElif_ifstmt(self)




    def elif_ifstmt(self):

        localctx = Python3Parser.Elif_ifstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_elif_ifstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(Python3Parser.ELIF)
            self.state = 668
            self.test()
            self.state = 669
            self.match(Python3Parser.COLON)
            self.state = 670
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_else_ifstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_ifstmt" ):
                listener.enterElse_ifstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_ifstmt" ):
                listener.exitElse_ifstmt(self)




    def else_ifstmt(self):

        localctx = Python3Parser.Else_ifstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_else_ifstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(Python3Parser.ELSE)
            self.state = 673
            self.match(Python3Parser.COLON)
            self.state = 674
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def else_while(self):
            return self.getTypedRuleContext(Python3Parser.Else_whileContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(Python3Parser.WHILE)
            self.state = 677
            self.test()
            self.state = 678
            self.match(Python3Parser.COLON)
            self.state = 679
            self.suite()
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 680
                self.else_while()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_whileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_else_while

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_while" ):
                listener.enterElse_while(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_while" ):
                listener.exitElse_while(self)




    def else_while(self):

        localctx = Python3Parser.Else_whileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_else_while)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(Python3Parser.ELSE)
            self.state = 684
            self.match(Python3Parser.COLON)
            self.state = 685
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def else_for(self):
            return self.getTypedRuleContext(Python3Parser.Else_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(Python3Parser.FOR)
            self.state = 688
            self.exprlist()
            self.state = 689
            self.match(Python3Parser.IN)
            self.state = 690
            self.testlist()
            self.state = 691
            self.match(Python3Parser.COLON)
            self.state = 692
            self.suite()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 693
                self.else_for()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_else_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_for" ):
                listener.enterElse_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_for" ):
                listener.exitElse_for(self)




    def else_for(self):

        localctx = Python3Parser.Else_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_else_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(Python3Parser.ELSE)
            self.state = 697
            self.match(Python3Parser.COLON)
            self.state = 698
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(Python3Parser.TRY)
            self.state = 701
            self.match(Python3Parser.COLON)
            self.state = 702
            self.suite()
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.state = 707 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 703
                    self.except_clause()
                    self.state = 704
                    self.match(Python3Parser.COLON)
                    self.state = 705
                    self.suite()
                    self.state = 709 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==22):
                        break

                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 711
                    self.match(Python3Parser.ELSE)
                    self.state = 712
                    self.match(Python3Parser.COLON)
                    self.state = 713
                    self.suite()


                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 716
                    self.match(Python3Parser.FINALLY)
                    self.state = 717
                    self.match(Python3Parser.COLON)
                    self.state = 718
                    self.suite()


                pass
            elif token in [20]:
                self.state = 721
                self.match(Python3Parser.FINALLY)
                self.state = 722
                self.match(Python3Parser.COLON)
                self.state = 723
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(Python3Parser.WITH)
            self.state = 727
            self.with_item()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 728
                self.match(Python3Parser.COMMA)
                self.state = 729
                self.with_item()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 735
            self.match(Python3Parser.COLON)
            self.state = 736
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.test()
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 739
                self.match(Python3Parser.AS)
                self.state = 740
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(Python3Parser.EXCEPT)
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 582091628181716998) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                self.state = 744
                self.test()
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 745
                    self.match(Python3Parser.AS)
                    self.state = 746
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)




    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 5, 6, 7, 8, 10, 11, 12, 23, 26, 28, 29, 30, 32, 33, 34, 35, 36, 38, 40, 50, 51, 52, 59, 66, 67, 71, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.simple_stmt()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.match(Python3Parser.NEWLINE)
                self.state = 753
                self.match(Python3Parser.INDENT)
                self.state = 755 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 754
                    self.stmt()
                    self.state = 757 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 584343700728659446) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32867) != 0)):
                        break

                self.state = 759
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.or_test()
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 764
                    self.match(Python3Parser.IF)
                    self.state = 765
                    self.or_test()
                    self.state = 766
                    self.match(Python3Parser.ELSE)
                    self.state = 767
                    self.test()


                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_test_nocond)
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.or_test()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(Python3Parser.LAMBDA)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 146368087401168896) != 0):
                self.state = 779
                self.varargslist()


            self.state = 782
            self.match(Python3Parser.COLON)
            self.state = 783
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(Python3Parser.LAMBDA)
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 146368087401168896) != 0):
                self.state = 786
                self.varargslist()


            self.state = 789
            self.match(Python3Parser.COLON)
            self.state = 790
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self):
            return self.getTypedRuleContext(Python3Parser.And_testContext,0)


        def orrule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.OrruleContext)
            else:
                return self.getTypedRuleContext(Python3Parser.OrruleContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.and_test()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 793
                self.orrule()
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(Python3Parser.OR, 0)

        def and_test(self):
            return self.getTypedRuleContext(Python3Parser.And_testContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_orrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrrule" ):
                listener.enterOrrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrrule" ):
                listener.exitOrrule(self)




    def orrule(self):

        localctx = Python3Parser.OrruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_orrule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(Python3Parser.OR)
            self.state = 800
            self.and_test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def andrule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AndruleContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AndruleContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.not_test()
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25:
                self.state = 803
                self.andrule()
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(Python3Parser.AND, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_andrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndrule" ):
                listener.enterAndrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndrule" ):
                listener.exitAndrule(self)




    def andrule(self):

        localctx = Python3Parser.AndruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_andrule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(Python3Parser.AND)
            self.state = 810
            self.not_test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def notrule(self):
            return self.getTypedRuleContext(Python3Parser.NotruleContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_not_test)
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.notrule()
                pass
            elif token in [1, 2, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_notrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotrule" ):
                listener.enterNotrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotrule" ):
                listener.exitNotrule(self)




    def notrule(self):

        localctx = Python3Parser.NotruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_notrule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(Python3Parser.NOT)
            self.state = 817
            self.not_test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.expr()
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & 9151314442816848641) != 0):
                self.state = 820
                self.comp_op()
                self.state = 821
                self.expr()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(Python3Parser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(Python3Parser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(Python3Parser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(Python3Parser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(Python3Parser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(Python3Parser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(Python3Parser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_comp_op)
        try:
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 830
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 831
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 832
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 833
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 834
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 835
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 836
                self.match(Python3Parser.NOT)
                self.state = 837
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 838
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 839
                self.match(Python3Parser.IS)
                self.state = 840
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(Python3Parser.STAR)
            self.state = 844
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self):
            return self.getTypedRuleContext(Python3Parser.Xor_exprContext,0)


        def orexprrule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.OrexprruleContext)
            else:
                return self.getTypedRuleContext(Python3Parser.OrexprruleContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.xor_expr()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 847
                self.orexprrule()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrexprruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR_OP(self):
            return self.getToken(Python3Parser.OR_OP, 0)

        def xor_expr(self):
            return self.getTypedRuleContext(Python3Parser.Xor_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_orexprrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrexprrule" ):
                listener.enterOrexprrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrexprrule" ):
                listener.exitOrexprrule(self)




    def orexprrule(self):

        localctx = Python3Parser.OrexprruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orexprrule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(Python3Parser.OR_OP)
            self.state = 854
            self.xor_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self):
            return self.getTypedRuleContext(Python3Parser.And_exprContext,0)


        def xorexprrule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.XorexprruleContext)
            else:
                return self.getTypedRuleContext(Python3Parser.XorexprruleContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)




    def xor_expr(self):

        localctx = Python3Parser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.and_expr()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==62:
                self.state = 857
                self.xorexprrule()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XorexprruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XOR(self):
            return self.getToken(Python3Parser.XOR, 0)

        def and_expr(self):
            return self.getTypedRuleContext(Python3Parser.And_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_xorexprrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXorexprrule" ):
                listener.enterXorexprrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXorexprrule" ):
                listener.exitXorexprrule(self)




    def xorexprrule(self):

        localctx = Python3Parser.XorexprruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_xorexprrule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(Python3Parser.XOR)
            self.state = 864
            self.and_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self):
            return self.getTypedRuleContext(Python3Parser.Shift_exprContext,0)


        def andexprrule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.AndexprruleContext)
            else:
                return self.getTypedRuleContext(Python3Parser.AndexprruleContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)




    def and_expr(self):

        localctx = Python3Parser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.shift_expr()
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==63:
                self.state = 867
                self.andexprrule()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndexprruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND_OP(self):
            return self.getToken(Python3Parser.AND_OP, 0)

        def shift_expr(self):
            return self.getTypedRuleContext(Python3Parser.Shift_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_andexprrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexprrule" ):
                listener.enterAndexprrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexprrule" ):
                listener.exitAndexprrule(self)




    def andexprrule(self):

        localctx = Python3Parser.AndexprruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_andexprrule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(Python3Parser.AND_OP)
            self.state = 874
            self.shift_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self):
            return self.getTypedRuleContext(Python3Parser.Arith_exprContext,0)


        def shiftexprrule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ShiftexprruleContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ShiftexprruleContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)




    def shift_expr(self):

        localctx = Python3Parser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.arith_expr()
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64 or _la==65:
                self.state = 877
                self.shiftexprrule()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftexprruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self):
            return self.getTypedRuleContext(Python3Parser.Arith_exprContext,0)


        def LEFT_SHIFT(self):
            return self.getToken(Python3Parser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(Python3Parser.RIGHT_SHIFT, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_shiftexprrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexprrule" ):
                listener.enterShiftexprrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexprrule" ):
                listener.exitShiftexprrule(self)




    def shiftexprrule(self):

        localctx = Python3Parser.ShiftexprruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_shiftexprrule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            _la = self._input.LA(1)
            if not(_la==64 or _la==65):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 884
            self.arith_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TermContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TermContext,i)


        def arithmeticrule1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Arithmeticrule1Context)
            else:
                return self.getTypedRuleContext(Python3Parser.Arithmeticrule1Context,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = Python3Parser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.term()
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==66 or _la==67:
                self.state = 887
                self.arithmeticrule1()
                self.state = 888
                self.term()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext,i)


        def arithmeticrule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArithmeticruleContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArithmeticruleContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = Python3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.factor()
            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 1074659329) != 0):
                self.state = 896
                self.arithmeticrule()
                self.state = 897
                self.factor()
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def arithmeticrule2(self):
            return self.getTypedRuleContext(Python3Parser.Arithmeticrule2Context,0)


        def power(self):
            return self.getTypedRuleContext(Python3Parser.PowerContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_factor)
        try:
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 67, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.arithmeticrule2()
                self.state = 905
                self.factor()
                pass
            elif token in [1, 2, 28, 29, 30, 38, 40, 50, 52, 59, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 907
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticruleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def AT(self):
            return self.getToken(Python3Parser.AT, 0)

        def DIV(self):
            return self.getToken(Python3Parser.DIV, 0)

        def MOD(self):
            return self.getToken(Python3Parser.MOD, 0)

        def IDIV(self):
            return self.getToken(Python3Parser.IDIV, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_arithmeticrule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticrule" ):
                listener.enterArithmeticrule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticrule" ):
                listener.exitArithmeticrule(self)




    def arithmeticrule(self):

        localctx = Python3Parser.ArithmeticruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_arithmeticrule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 1074659329) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmeticrule1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_arithmeticrule1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticrule1" ):
                listener.enterArithmeticrule1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticrule1" ):
                listener.exitArithmeticrule1(self)




    def arithmeticrule1(self):

        localctx = Python3Parser.Arithmeticrule1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_arithmeticrule1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            _la = self._input.LA(1)
            if not(_la==66 or _la==67):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmeticrule2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(Python3Parser.ADD, 0)

        def MINUS(self):
            return self.getToken(Python3Parser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(Python3Parser.NOT_OP, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_arithmeticrule2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticrule2" ):
                listener.enterArithmeticrule2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticrule2" ):
                listener.exitArithmeticrule2(self)




    def arithmeticrule2(self):

        localctx = Python3Parser.Arithmeticrule2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_arithmeticrule2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 35) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_expr(self):
            return self.getTypedRuleContext(Python3Parser.Atom_exprContext,0)


        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)




    def power(self):

        localctx = Python3Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.atom_expr()
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 917
                self.match(Python3Parser.POWER)
                self.state = 918
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(Python3Parser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_atom_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_expr" ):
                listener.enterAtom_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_expr" ):
                listener.exitAtom_expr(self)




    def atom_expr(self):

        localctx = Python3Parser.Atom_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_atom_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 921
                self.match(Python3Parser.AWAIT)


            self.state = 924
            self.atom()
            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 581527301884215296) != 0):
                self.state = 925
                self.trailer()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(Python3Parser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(Python3Parser.CLOSE_BRACE, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def NUMBER(self):
            return self.getToken(Python3Parser.NUMBER, 0)

        def ELLIPSIS(self):
            return self.getToken(Python3Parser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.STRING)
            else:
                return self.getToken(Python3Parser.STRING, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.state = 931
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 934
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 932
                    self.yield_expr()
                    pass
                elif token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 51, 52, 59, 66, 67, 71, 72]:
                    self.state = 933
                    self.testlist_comp()
                    pass
                elif token in [53]:
                    pass
                else:
                    pass
                self.state = 936
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [59]:
                self.state = 937
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 584343427995402246) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                    self.state = 938
                    self.testlist_comp()


                self.state = 941
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [72]:
                self.state = 942
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 728458616071258118) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                    self.state = 943
                    self.dictorsetmaker()


                self.state = 946
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [40]:
                self.state = 947
                self.match(Python3Parser.NAME)
                pass
            elif token in [2]:
                self.state = 948
                self.match(Python3Parser.NUMBER)
                pass
            elif token in [1]:
                self.state = 950 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 949
                    self.match(Python3Parser.STRING)
                    self.state = 952 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1):
                        break

                pass
            elif token in [50]:
                self.state = 954
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [28]:
                self.state = 955
                self.match(Python3Parser.NONE)
                pass
            elif token in [29]:
                self.state = 956
                self.match(Python3Parser.TRUE)
                pass
            elif token in [30]:
                self.state = 957
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                self.state = 960
                self.test()
                pass
            elif token in [51]:
                self.state = 961
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 37]:
                self.state = 964
                self.comp_for()
                pass
            elif token in [53, 54, 60]:
                self.state = 972
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 965
                        self.match(Python3Parser.COMMA)
                        self.state = 968
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                            self.state = 966
                            self.test()
                            pass
                        elif token in [51]:
                            self.state = 967
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 974
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54:
                    self.state = 975
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(Python3Parser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(Python3Parser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(Python3Parser.DOT, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 980
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 728458616071258118) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                    self.state = 981
                    self.arglist()


                self.state = 984
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 986
                self.subscriptlist()
                self.state = 987
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 3)
                self.state = 989
                self.match(Python3Parser.DOT)
                self.state = 990
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.subscript()
            self.state = 998
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 994
                    self.match(Python3Parser.COMMA)
                    self.state = 995
                    self.subscript() 
                self.state = 1000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 1001
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)




    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 582091628181716998) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                    self.state = 1005
                    self.test()


                self.state = 1008
                self.match(Python3Parser.COLON)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 582091628181716998) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                    self.state = 1009
                    self.test()


                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55:
                    self.state = 1012
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(Python3Parser.COLON)
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 582091628181716998) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                self.state = 1018
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                self.state = 1021
                self.expr()
                pass
            elif token in [51]:
                self.state = 1022
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1032
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1025
                    self.match(Python3Parser.COMMA)
                    self.state = 1028
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                        self.state = 1026
                        self.expr()
                        pass
                    elif token in [51]:
                        self.state = 1027
                        self.star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1034
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 1035
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.test()
            self.state = 1043
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1039
                    self.match(Python3Parser.COMMA)
                    self.state = 1040
                    self.test() 
                self.state = 1045
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 1046
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COLON)
            else:
                return self.getToken(Python3Parser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.POWER)
            else:
                return self.getToken(Python3Parser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ExprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ExprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1055
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                    self.state = 1049
                    self.test()
                    self.state = 1050
                    self.match(Python3Parser.COLON)
                    self.state = 1051
                    self.test()
                    pass
                elif token in [57]:
                    self.state = 1053
                    self.match(Python3Parser.POWER)
                    self.state = 1054
                    self.expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1075
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17, 37]:
                    self.state = 1057
                    self.comp_for()
                    pass
                elif token in [54, 73]:
                    self.state = 1069
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1058
                            self.match(Python3Parser.COMMA)
                            self.state = 1065
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                                self.state = 1059
                                self.test()
                                self.state = 1060
                                self.match(Python3Parser.COLON)
                                self.state = 1061
                                self.test()
                                pass
                            elif token in [57]:
                                self.state = 1063
                                self.match(Python3Parser.POWER)
                                self.state = 1064
                                self.expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1071
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

                    self.state = 1073
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==54:
                        self.state = 1072
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 1079
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                    self.state = 1077
                    self.test()
                    pass
                elif token in [51]:
                    self.state = 1078
                    self.star_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1095
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17, 37]:
                    self.state = 1081
                    self.comp_for()
                    pass
                elif token in [54, 73]:
                    self.state = 1089
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1082
                            self.match(Python3Parser.COMMA)
                            self.state = 1085
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                                self.state = 1083
                                self.test()
                                pass
                            elif token in [51]:
                                self.state = 1084
                                self.star_expr()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 1091
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

                    self.state = 1093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==54:
                        self.state = 1092
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def COLON(self):
            return self.getToken(Python3Parser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(Python3Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(Python3Parser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(Python3Parser.CLASS)
            self.state = 1100
            self.match(Python3Parser.NAME)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1101
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 728458616071258118) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                    self.state = 1102
                    self.arglist()


                self.state = 1105
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 1108
            self.match(Python3Parser.COLON)
            self.state = 1109
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.COMMA)
            else:
                return self.getToken(Python3Parser.COMMA, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.argument()
            self.state = 1116
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1112
                    self.match(Python3Parser.COMMA)
                    self.state = 1113
                    self.argument() 
                self.state = 1118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 1119
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def ASSIGN(self):
            return self.getToken(Python3Parser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(Python3Parser.POWER, 0)

        def STAR(self):
            return self.getToken(Python3Parser.STAR, 0)

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1122
                self.test()
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17 or _la==37:
                    self.state = 1123
                    self.comp_for()


                pass

            elif la_ == 2:
                self.state = 1126
                self.test()
                self.state = 1127
                self.match(Python3Parser.ASSIGN)
                self.state = 1128
                self.test()
                pass

            elif la_ == 3:
                self.state = 1130
                self.match(Python3Parser.POWER)
                self.state = 1131
                self.test()
                pass

            elif la_ == 4:
                self.state = 1132
                self.match(Python3Parser.STAR)
                self.state = 1133
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_comp_iter)
        try:
            self.state = 1138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1136
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1137
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def ASYNC(self):
            return self.getToken(Python3Parser.ASYNC, 0)

        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1140
                self.match(Python3Parser.ASYNC)


            self.state = 1143
            self.match(Python3Parser.FOR)
            self.state = 1144
            self.exprlist()
            self.state = 1145
            self.match(Python3Parser.IN)
            self.state = 1146
            self.or_test()
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 137439092736) != 0):
                self.state = 1147
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(Python3Parser.IF)
            self.state = 1151
            self.test_nocond()
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 137439092736) != 0):
                self.state = 1152
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Encoding_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_encoding_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncoding_decl" ):
                listener.enterEncoding_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncoding_decl" ):
                listener.exitEncoding_decl(self)




    def encoding_decl(self):

        localctx = Python3Parser.Encoding_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_encoding_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(Python3Parser.YIELD)
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 582091628181717126) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 99) != 0):
                self.state = 1158
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_yield_arg)
        try:
            self.state = 1164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                self.match(Python3Parser.FROM)
                self.state = 1162
                self.test()
                pass
            elif token in [1, 2, 23, 26, 28, 29, 30, 38, 40, 50, 52, 59, 66, 67, 71, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





